import React, { useEffect, useState } from "react";
import { useQuery } from "react-query";
import { fromPQSFields } from "../../../constants/item";
import { hasValidationError } from "../../../helpers/validation-checker";
import { isRelatedFieldOk, relatedFields } from "../../../helpers/related-tem";
import { isRelatedFieldOkReq } from "../../../helpers/related-tem-req";
import { seperator } from "../../../helpers/seperator";
import {
  checkConnected,
  readData,
  removeItemValue,
  saveData,
} from "../../../components/DataStorage";
import { FontAwesome, Feather } from "@expo/vector-icons";

import DynamicInput from "../../../components/DynamicInput/DynamicInput";
import AsyncStorage from "@react-native-async-storage/async-storage";

import {
  View,
  StyleSheet,
  ScrollView,
  Image,
  Button,
  Text,
  Dimensions,
  TouchableOpacity,
  ActivityIndicator,
} from "react-native";
import SelectDropdown from "react-native-select-dropdown";
import { Form } from "validate-form-in-expo-style";

const facilityField = {
  id: "facility",
  type: "text",
  active: false,
  disabled: true,
  required: true,
  state: "facility",
  name: "Facility Name",
};

function Item({
  defaultValueItem,
  setDefaultValueItem,
  itemParent,
  setCurrentTab,
}) {
  const [fieldsValue, setFieldValue] = useState({});
  const [fieldErrors, setFieldErrors] = useState({});
  const [selectedItemClass, setSelectedItemClass] = useState(null);
  const [selectedItemType, setSelectedItemType] = useState(null);
  const [isFromPQS, setIsFromPQS] = useState(false);
  const [pqsData, setPQSData] = useState(null);
  const [itemClassesAndTypes, setItemClassesAndTypes] = useState(null);
  // const { id } = useParams();
  // const history = useHistory();
  // const params = new URLSearchParams(history.location.search);
  // const parent = params.get("parent");

  const { isLoading: isItemDefaultLoading } = useQuery(
    ["item-default-value"],
    async () => {
      const defaultData = {
        code: "Unique code generated by IGA",
        same_item: "1",
      };

      if (Object.keys(defaultValueItem).length === 0) return defaultData;

      let item = defaultValueItem;
      if (item["PQSPISCode"]) {
        setIsFromPQS(true);
      }
      // for (const key in item) {
      //   if (typeof item[key] === "number") {
      //     if (item[key] % 1 !== 0) {
      //       item[key] = item[key]
      //         .toFixed(2)
      //         .toString()
      //         .replace(".", seperator());
      //     }
      //   }
      // }

      return { ...item };
    },
    {
      refetchOnMount: true,
      onSuccess(data) {
        setFieldValue((preValues) => ({
          ...data,
          ...preValues,
        }));
      },
    }
  );

  const { data: xxx, isLoading: isItemClassesAndTypesLoading } =
    useQuery(
      ["item-classes-and-types"],
      async () => {
        // const res = await ItemService.getItemClassesAndTypes(parent);
        if(Object.keys(itemParent).length === 0){
          setFieldValue((preValues) => ({
            ...preValues,
            facility: itemParent,
          }));
        }
        else{
          readData("parent").then((res) => {
            console.log("res",res)
            setFieldValue((preValues) => ({
              ...preValues,
              facility: res,
            }));
          }
          );
        }
        // setFieldValue((preValues) => ({
        //   ...preValues,
        //   facility: res.data.facility,
        // }));
        const res=await AsyncStorage.getItem("itemClass");
          const itemClass = JSON.parse(res);
          // console.log("itemClass",itemClass)
          setItemClassesAndTypes(itemClass);
          const data = itemClass.filter((item) => item.item_type.length > 0);
          // console.log("data",data)
          if (Object.keys(defaultValueItem).length === 0) {
            setSelectedItemClass(data[0]);
            setSelectedItemType(data[0]?.item_type?.[0]);
          } else {
            console.log(fieldsValue);
            if (Object.keys(fieldsValue).length === 0) {
              // window.location.reload();
              setSelectedItemClass(data[0]);
              setSelectedItemType(data[0]?.item_type?.[0]);
            } else {
              const item_class = data.find(
                (item) => item?.item_class?.id === fieldsValue.item_class
              );
              const item_type = item_class?.item_type?.find(
                (item) => item.id === fieldsValue.item_type
              );
              console.log(fieldsValue);
              console.log(item_class);
              console.log(item_type);
              setSelectedItemClass(item_class);

              setSelectedItemType(item_type);
            }
          }
          return data;

          // if (datas.length === 0) {
          //   toast.error(<Text>No available item found</Text>);
          //   history.push("/settings/item-t-level");
          // }
        
      },
      {
        refetchOnMount: true,
        onSuccess(data) {
          console.log("data",data);
         
        },
      }
    );

  // const { data: pqsData, isLoading: isPqsLoading } = useQuery(
  //   ["pqs", selectedItemType?.id],
  //   async () => {
  //     let id_param = 0;
  //     if (id == "new") {
  //       id_param = selectedItemType?.id;
  //     } else {
  //       id_param = 1;
  //       if (fieldsValue !== {}) {
  //         console.log("hi");
  //         id_param = fieldsValue["item_type"];
  //       } else {
  //         window.location.reload();
  //       }
  //     }
  //     const res = await ItemService.getPQS(id_param);
  //     if (res.data.length === 0) {
  //       return [];
  //     }
  //     return
  //   },
  //   {
  //     refetchOnMount: true,
  //   }
  // );

  const {
    data: itemFields,
    isLoading: isItemsFieldsLoading,
    isIdle: isItemsFieldsIdle,
    refetch: refetchItemFields,
  } = useQuery(
    [
      "item-fields",
      
    ],
    async () => {
      // const res = await ItemService.getItemFields(
      //   selectedItemClass.item_class.id,
      //   selectedItemType.id,
      //   parent
      // );
      const x =await AsyncStorage.getItem("itemFields");
        const z = JSON.parse(x);
        const temp= z.filter((item) => item.item_type.length > 0);
        // find the item class
        const itemClass = temp.find(
          (item) => item.item_class.id === selectedItemClass?.item_class.id
        );
        // find the item type
        const itemType = itemClass?.item_type?.find(
          (item) => item.id === selectedItemType?.id
        );
        // console.log(itemType);
        // console.log("itemType");
        if(itemType.havepqs){
        const pqs = itemType?.pqs;
        setPQSData(
          pqs.map((item) => ({
            label: item.pqsnumber
              ? item.pqsnumber +
                " , " +
                item.type +
                " , " +
                item.vaccinenetstoragecapacity +
                " , " +
                item.manufacturer
              : item.pqscode +
                " , " +
                item.description +
                " , " +
                item.freezercapacity +
                " , " +
                item.make,
            value: item,
          }))
        );
        }
        const res = {
          data: {
            fields: itemType?.fields,
          },
        };

        const result = [];
        if (res.data.fields) {
          for (const field of res.data.fields) {
            if (Object.keys(defaultValueItem).length !== 0 && field.field.state === "same_item") {
              continue;
            }
            // const fieldTopicInResult = result[field.field.topic] ?? [];

            // fieldTopicInResult.push(field.field);
            result.push(field.field);
          }
          // const firstTopic = Object.keys(result)[0] ?? "Type";
          // if (result[firstTopic] === undefined) {
          //   result[firstTopic] = [];
          // }
          //static fields
          result.unshift({
            id: "code",
            name: "Item code",
            type: "text",
            active: false,
            disabled: true,
            required: false,
            state: "code",
            params: [],
          });
        }
        //
        return result;
     
    },
    {
      enabled: !!selectedItemType,
    }
  );

  useEffect(() => {
    console.log(selectedItemType);
    if (selectedItemType) {
      refetchItemFields();
    }
  }, [selectedItemType]);

  const hasRequiredErrors = () => {
    const _fieldErrors = { ...fieldErrors };
    const currentStepFields = Object.values(itemFields)[activeStep];
    currentStepFields.forEach((field) => {
      console.log(fieldsValue[field.state]);
      if (
        field.required &&
        !fieldsValue[field.state] &&
        !isRelatedFieldOkReq(field.state, fieldsValue) &&
        fieldsValue[field.state] !== 0
      ) {
        if (field.type === "bool") {
          if (
            fieldsValue[field.state] === undefined ||
            fieldsValue[field.state] === null
          ) {
            _fieldErrors[field.state] = "this field is required!";
          }
        } else {
          _fieldErrors[field.state] = "this field is required!";
        }
      }
    });
    for (const key in relatedFields) {
      const fields = relatedFields[key];
      if (fieldsValue[key] === true) {
        fields.forEach((field) => {
          delete _fieldErrors[field];
        });
      }
    }
    setFieldErrors(_fieldErrors);
    return Object.keys(_fieldErrors).length > 0;
  };

  const handleNext = () => {
    if (!hasRequiredErrors()) {
      setActiveStep((prevActiveStep) => prevActiveStep + 1);
    }
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
    setFieldErrors({});
  };

  const onChangeHandler = async (value, field) => {
    const validationErr = hasValidationError(value, field.validation?.[0]);
    const cloneFieldsValue = { ...fieldsValue };
    cloneFieldsValue[field.state] = value;
    setFieldValue(cloneFieldsValue);
    //check validation and required
    const _fieldErrors = { ...fieldErrors };
    if (validationErr) {
      _fieldErrors[field.state] = validationErr;
    } else {
      delete _fieldErrors[field.state];
    }
    for (const key in relatedFields) {
      const fields = relatedFields[key];
      console.log(fieldsValue[key]);
      fields.forEach((field) => {
        delete _fieldErrors[field];
      });
    }
    console.log(_fieldErrors);
    setFieldErrors(_fieldErrors);
  };

  const onSaveHandler = async (e) => {
    e.preventDefault();
    if (hasRequiredErrors()) {
      return;
    }
    const _fieldsValue = { ...fieldsValue };
    for (const key in relatedFields) {
      const fields = relatedFields[key];
      if (fieldsValue[key] === true) {
        fields.forEach((field) => {
          delete _fieldsValue[field];
        });
      }
    }
    if (!isFromPQS) {
      for (const key in fieldsValue) {
        if (fromPQSFields.find((pqsField) => pqsField.state === key)) {
          delete _fieldsValue[key];
        }
      }
    }
    _fieldsValue["item_class"] = selectedItemClass.item_class.id;
    _fieldsValue["item_type"] = selectedItemType.id;
    _fieldsValue["facility"] = _fieldsValue["facility"].id;
    // remove empty items
    for (const key in _fieldsValue) {
      const field = Object.values(itemFields)
        .flat()
        .find((field) => field.state === key);
      if (field === undefined) {
        if (typeof _fieldsValue[key] === "string") {
          if (_fieldsValue[key].includes(seperator())) {
            _fieldsValue[key] = parseFloat(_fieldsValue[key].replace(",", "."));
          }
        }

        continue;
      }
      if (_fieldsValue[key] === "" || _fieldsValue[key] === null) {
        delete _fieldsValue[key];
        continue;
      }

      if (typeof _fieldsValue[key] === "string") {
        // find this field
        console.log(Object.values(itemFields).flat());
        console.log(key);
        // const field = Object.values(itemFields).flat().find((field) => field.state === key);

        if (field.type === "number") {
          _fieldsValue[key] = parseFloat(_fieldsValue[key].replace(",", "."));
        }
      }
    }
    const page = window.event.submitter.name === "saveNew" ? "new" : "edit";

    const res = await (id === "new"
      ? ItemService.postItem(_fieldsValue)
      : ItemService.putItem(_fieldsValue));
    if (page === "new") {
      window.location.reload();
    } else {
      history.push(`/items/list`);
      setFieldValue(_fieldsValue);
    }
  };

  const selectItemClassHandler = async (e) => {
    console.log(e);
    console.log(itemClassesAndTypes);
    setSelectedItemClass(itemClassesAndTypes[e]);
    setSelectedItemType(itemClassesAndTypes[e].item_type[0]);
  };

  const selectItemTypeHandler = (e) => {
    setSelectedItemType(selectedItemClass.item_type[e]);
  };

  const onIsFromPQSChange = () => {
    setIsFromPQS((preChecked) => !preChecked);
  };

  const selectPQSHandler = () => {
    // console.log(fieldsValue["PQSPISCode"]);
    const value = pqsData.find(
      (pqs) => pqs.label.split(" , ")[0] === fieldsValue["PQSPISCode"]
    )?.value;
    if (value === undefined) {
      //TODO: show a correct massage to user
      return;
    }

    const cloneFieldsValue = { ...fieldsValue };

    const selectedPqs = pqsData.find(
      (pqs) => pqs?.value?.id === value?.id
    ).value;
    if (selectedPqs.ptype == 3) {
      cloneFieldsValue["PQSPISManufacturer"] = selectedPqs.make;
      cloneFieldsValue["PQSPISRefrigerantGas"] = selectedPqs.refrigerant;
      cloneFieldsValue["PQSPISType"] = selectedPqs.model;
      cloneFieldsValue["PQSPISTemperatureWorkingZone"] =
        selectedPqs.refrigerant;
      cloneFieldsValue["NetVaccineStorageCapacity"] =
        selectedPqs.refrigeratorcapacity
          .toFixed(2)
          .toString()
          .replace(".", seperator());
      cloneFieldsValue["FreezerNetCapacity"] = selectedPqs.freezercapacity
        .toFixed(2)
        .toString()
        .replace(".", seperator());
      cloneFieldsValue["Height"] = selectedPqs.h
        .toFixed(2)
        .toString()
        .replace(".", seperator());
      cloneFieldsValue["Width"] = selectedPqs.w
        .toFixed(2)
        .toString()
        .replace(".", seperator());
      cloneFieldsValue["Length"] = selectedPqs.l
        .toFixed(2)
        .toString()
        .replace(".", seperator());
    } else {
      cloneFieldsValue["PQSPISType"] = selectedPqs.type;
      cloneFieldsValue["PQSPISManufacturer"] = selectedPqs.manufacturer;
      cloneFieldsValue["PQSPISRefrigerantGas"] = "--";
      cloneFieldsValue["PQSPISTemperatureWorkingZone"] = "--";
      cloneFieldsValue["NetVaccineStorageCapacity"] =
        selectedPqs.vaccinenetstoragecapacity
          .toFixed(2)
          .toString()
          .replace(".", seperator());
      cloneFieldsValue["CoolantPackNominalCapacity"] =
        selectedPqs.coolantpacknominalcapacity
          .toFixed(2)
          .toString()
          .replace(".", seperator());
      cloneFieldsValue["NumberOfCoolantPacksRequired"] =
        selectedPqs.numbercoolantpacks;
      cloneFieldsValue["ExternalSize"] = selectedPqs.externalvolume
        .toFixed(2)
        .toString()
        .replace(".", seperator());
    }

    setFieldValue(cloneFieldsValue);
  };

  if (
    isItemDefaultLoading ||
    isItemClassesAndTypesLoading ||
    isItemsFieldsLoading ||
    isItemsFieldsIdle
  ) {
    return (
      <ScrollView>
        <View>
          <ActivityIndicator size="large" color="#0000ff" />
        </View>
      </ScrollView>
    );
  }

  return (
    <ScrollView style={styles.newfac}>
      <Form onSubmit={onSaveHandler}>
        <View>
          <DynamicInput
            field={facilityField}
            defaultValue={fieldsValue["facility"]?.name}
          />
        </View>
        <View>
          <Text style={styles.label}>
            Item class
            <Text style={styles.required}>*</Text>
          </Text>
          {/* {console.log("class", itemClassesAndTypes)} */}
          <SelectDropdown
            data={itemClassesAndTypes?.map((zz, index) => {
              return { value: index, label: zz.item_class.title, key: index };
            })}
            defaultButtonText={"Item class"}
            buttonStyle={styles.dropdown1BtnStyle}
            buttonTextStyle={styles.dropdown1BtnTxtStyle}
            renderDropdownIcon={(isOpened) => {
              return (
                <FontAwesome
                  name={isOpened ? "chevron-up" : "chevron-down"}
                  color={"#444"}
                  size={18}
                />
              );
            }}
            dropdownIconPosition={"right"}
            dropdownStyle={styles.dropdown1DropdownStyle}
            rowStyle={styles.dropdown1RowStyle}
            rowTextStyle={styles.dropdown1RowTxtStyle}
            onSelect={(selectedItem, index) => {
              selectItemClassHandler(index);
            }}
            buttonTextAfterSelection={(selectedItem, index) => {
              // text represented after item is selected
              // if data array is an array of objects then return selectedItem.property to render after item is selected
              return selectedItem.label;
            }}
            rowTextForSelection={(item, index) => {
              // text represented for each item in dropdown
              // if data array is an array of objects then return item.property to represent item in dropdown
              return item.label;
            }}
          />
        </View>
        <View>
          <Text style={styles.label}>
            Items category <Text style={styles.required}>*</Text>
          </Text>

          <SelectDropdown
            data={selectedItemClass?.item_type?.map((itemType, index) => {
              return { value: index, label: itemType.title, key: index };
            })}
            defaultButtonText={"Items category"}
            buttonStyle={styles.dropdown1BtnStyle}
            buttonTextStyle={styles.dropdown1BtnTxtStyle}
            renderDropdownIcon={(isOpened) => {
              return (
                <FontAwesome
                  name={isOpened ? "chevron-up" : "chevron-down"}
                  color={"#444"}
                  size={18}
                />
              );
            }}
            dropdownIconPosition={"right"}
            dropdownStyle={styles.dropdown1DropdownStyle}
            rowStyle={styles.dropdown1RowStyle}
            rowTextStyle={styles.dropdown1RowTxtStyle}
            onSelect={(selectedItem, index) => {
              selectItemTypeHandler(index);
            }}
            buttonTextAfterSelection={(selectedItem, index) => {
              // text represented after item is selected
              // if data array is an array of objects then return selectedItem.property to render after item is selected
              return selectedItem.label;
            }}
            rowTextForSelection={(item, index) => {
              // text represented for each item in dropdown
              // if data array is an array of objects then return item.property to represent item in dropdown
              return item.label;
            }}
          />
        </View>

        {selectedItemType?.havepqs && (
          <View>
            <Text>Is this item from PQS/PIS list?</Text>
            <SelectDropdown
              data={[
                { value: "No", key: false },
                { value: "Yes", key: true },
              ]}
              defaultButtonText={"Is this item from PQS/PIS list?"}
              onSelect={(selectedItem, index) => {
                onIsFromPQSChange();
              }}
              buttonTextAfterSelection={(selectedItem, index) => {
                // text represented after item is selected
                // if data array is an array of objects then return selectedItem.property to render after item is selected
                return selectedItem.value;
              }}
              rowTextForSelection={(item, index) => {
                // text represented for each item in dropdown
                // if data array is an array of objects then return item.property to represent item in dropdown
                return item.value;
              }}
            />

            {isFromPQS &&
              fromPQSFields.map((pqsField) => (
                <View key={pqsField.state}>
                  <View key={pqsField.state + "field"}>
                    <Text>{pqsField.name}</Text>
                  </View>

                  {pqsData && pqsField.state === "PQSPISCode" ? (
                    <>
                      <SelectDropdown
                        data={pqsData}
                        defaultButtonText={"PQSPIS Field"}
                        onSelect={(selectedItem, index) => {
                          onChangeHandler(
                            selectedItem.label.split(" , ")[0],
                            pqsField
                          );
                        }}
                        search={true}
                        buttonTextAfterSelection={(selectedItem, index) => {
                          // text represented after item is selected
                          // if data array is an array of objects then return selectedItem.property to render after item is selected
                          return selectedItem.label;
                        }}
                        rowTextForSelection={(item, index) => {
                          // text represented for each item in dropdown
                          // if data array is an array of objects then return item.property to represent item in dropdown
                          return item.label;
                        }}
                      />
                      {/* <Select
                        options={pqsData}
                        key={pqsField.state}
                        onChange={(e) => {
                          console.log("on change ");
                          onChangeHandler(e.label.split(" , ")[0], pqsField);
                        }}
                        value={{
                          label: fieldsValue["PQSPISCode"],
                          value: pqsData.find(
                            (pqs) =>
                              pqs.label.split(" , ")[0] ===
                              fieldsValue["PQSPISCode"]
                          )?.value,
                        }}
                    
                      /> */}
                    </>
                  ) : (
                    <DynamicInput
                      field={pqsField}
                      onChangeHandler={onChangeHandler}
                      defaultValue={fieldsValue[pqsField.state]}
                    />
                  )}

                  {pqsField.state === "PQSPISCode" && (
                    <View>
                      <TouchableOpacity
                        activeOpacity={0.8}
                        onPress={selectPQSHandler}
                        style={styles.appButtonContainer}
                      >
                        <Text style={styles.appButtonText}>Load</Text>
                      </TouchableOpacity>
                    </View>
                  )}
                </View>
              ))}
          </View>
        )}

        {itemFields !== undefined &&
          Object.values(itemFields)?.map((field) => {
            if (!isRelatedFieldOk(field.state, fieldsValue)) {
              return null;
            }
            const hasRequiredError = !!fieldErrors[field.state];
            return (
              <View key={field.name}>
                <DynamicInput
                  field={field}
                  onChangeHandler={onChangeHandler}
                  defaultValue={fieldsValue[field.state]}
                />
                {hasRequiredError && (
                  <View key={field.id + "error"}>
                    <Text>{fieldErrors[field.state]}</Text>
                  </View>
                )}
              </View>
            );
          })}
        <TouchableOpacity
          activeOpacity={0.8}
          onPress={onSaveHandler}
          style={styles.appButtonContainer}
        >
          <Text style={styles.appButtonText}>Save all</Text>
        </TouchableOpacity>
      </Form>
    </ScrollView>
  );
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
  },
  map: {
    width: Dimensions.get("window").width,
    height: Dimensions.get("window").height,
  },
  appButtonContainer: {
    elevation: 8,
    backgroundColor: "#009688",
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 12,
    marginTop: 10,
    marginBottom: 10,
    paddingBottom: 10,
  },
  appButtonText: {
    fontSize: 18,
    color: "#fff",
    fontWeight: "bold",
    alignSelf: "center",
    textTransform: "uppercase",
  },
  dropdown1BtnStyle: {
    width: "100%",
    height: 60,
    backgroundColor: "#FFF",
    borderRadius: 8,
    borderWidth: 2,
    borderColor: "#444",
  },
  dropdown1BtnTxtStyle: { color: "#444", textAlign: "left" },
  dropdown1DropdownStyle: { backgroundColor: "#EFEFEF" },
  dropdown1RowStyle: {
    backgroundColor: "#EFEFEF",
    borderBottomColor: "#C5C5C5",
  },
  dropdown1RowTxtStyle: { color: "#444", textAlign: "left" },
  label: {
    color: "#444",
    fontSize: 15,
    fontWeight: "bold",
    marginBottom: 5,
  },
  newfac: {
    padding: 2,
    height: "82%",
  },
  required: {
    color: "red",
    fontSize: 15,
    fontWeight: "bold",
    marginBottom: 5,
  },
});
export default Item;
